{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json", 
    "contentVersion": "2.0.0.0", 
    "parameters": {
        "vmScaleSetMinCount": {
            "allowedValues": [
                1, 
                2, 
                3, 
                4, 
                5, 
                6
            ], 
            "defaultValue": 2, 
            "metadata": {
                "description": "The minimum(and default) number of BIG-IP VEs that will be deployed into the VM Scale Set"
            }, 
            "type": "int"
        }, 
        "vmScaleSetMaxCount": {
            "allowedValues": [
                2, 
                3, 
                4, 
                5, 
                6, 
                7, 
                8
            ], 
            "defaultValue": 4, 
            "metadata": {
                "description": "The number of maximum BIG-IP VEs that can be deployed into the VM Scale Set"
            }, 
            "type": "int"
        }, 
        "scaleOutThroughput": {
            "allowedValues": [
                50, 
                55, 
                60, 
                65, 
                70, 
                75, 
                80, 
                85, 
                90, 
                95
            ], 
            "defaultValue": 90, 
            "metadata": {
                "description": "The percentange of 'Network Out' Throughput to scale out on.  This will be factored as a percentage of the F5 PAYG image bandwidth(Mbps) size chosen"
            }, 
            "type": "int"
        }, 
        "scaleInThroughput": {
            "allowedValues": [
                5, 
                10, 
                15, 
                20, 
                25, 
                30, 
                35, 
                40, 
                45
            ], 
            "defaultValue": 10, 
            "metadata": {
                "description": "The percentange of 'Network Out' Throughput to scale in on.  This will be factored as a percentage of the F5 PAYG image bandwidth(Mbps) size chosen"
            }, 
            "type": "int"
        }, 
        "scaleTimeWindow": {
            "allowedValues": [
                5, 
                10, 
                15, 
                30
            ], 
            "defaultValue": 10, 
            "metadata": {
                "description": "The time window required to trigger a scale event(up and down), this is used to determine the amount of time needed for a threshold to be breached as well as to prevent flapping"
            }, 
            "type": "int"
        }, 
        "adminUsername": {
            "defaultValue": "azureuser", 
            "metadata": {
                "description": "User name for the Virtual Machine"
            }, 
            "type": "string"
        }, 
        "adminPassword": {
            "metadata": {
                "description": "Password to login to the Virtual Machine"
            }, 
            "type": "securestring"
        }, 
        "dnsLabel": {
            "defaultValue": "REQUIRED", 
            "metadata": {
                "description": "Unique DNS Name for the Public IP used to access the Virtual Machine"
            }, 
            "type": "string"
        }, 
        "instanceType": {
            "allowedValues": [
                "Standard_A3", 
                "Standard_A4", 
                "Standard_A5", 
                "Standard_A6", 
                "Standard_A7", 
                "Standard_A8", 
                "Standard_A9", 
                "Standard_D2", 
                "Standard_D3", 
                "Standard_D4", 
                "Standard_D11", 
                "Standard_D12", 
                "Standard_D13", 
                "Standard_D14", 
                "Standard_D2_v2", 
                "Standard_D3_v2", 
                "Standard_D4_v2", 
                "Standard_D5_v2", 
                "Standard_D11_v2", 
                "Standard_D12_v2", 
                "Standard_D13_v2", 
                "Standard_D14_v2", 
                "Standard_D15_v2", 
                "Standard_F4", 
                "Standard_F8"
            ], 
            "defaultValue": "Standard_D2_v2", 
            "metadata": {
                "description": "Size of the VM"
            }, 
            "type": "string"
        }, 
        "imageName": {
            "allowedValues": [
                "Best"
            ], 
            "defaultValue": "Best", 
            "metadata": {
                "description": "F5 SKU(IMAGE) to Deploy, 'Best' is the only option as ASM is required"
            }, 
            "type": "string"
        }, 
        "bigIpVersion": {
            "allowedValues": [
                "latest", 
                "13.0.000", 
                "12.1.22"
            ], 
            "defaultValue": "13.0.000", 
            "metadata": {
                "description": "F5 BIG-IP Version to use"
            }, 
            "type": "string"
        }, 
        "licensedBandwidth": {
            "allowedValues": [
                "25m", 
                "200m", 
                "1g"
            ], 
            "defaultValue": "200m", 
            "metadata": {
                "description": "PAYG licensed bandwidth(Mbps) image to deploy"
            }, 
            "type": "string"
        }, 
        "solutionDeploymentName": {
            "metadata": {
                "description": "A unique name for this deployment."
            }, 
            "type": "string"
        }, 
        "applicationProtocols": {
            "allowedValues": [
                "http", 
                "https", 
                "http-https", 
                "https-offload"
            ], 
            "defaultValue": "http-https", 
            "metadata": {
                "description": "The protocol(s) used by your application."
            }, 
            "type": "string"
        }, 
        "applicationAddress": {
            "metadata": {
                "description": "The public IP address or DNS FQDN of the application that this WAF will protect."
            }, 
            "type": "string"
        }, 
        "applicationServiceFqdn": {
            "defaultValue": "NOT_SPECIFIED", 
            "metadata": {
                "description": "If deploying in front of an Azure App Service, the FQDN of the public application."
            }, 
            "type": "string"
        }, 
        "applicationPort": {
            "defaultValue": "80", 
            "metadata": {
                "description": "If deploying an HTTP application, the port on which your service listens for unencrypted traffic. This field is not required when deploying https only."
            }, 
            "type": "string"
        }, 
        "applicationSecurePort": {
            "defaultValue": "443", 
            "metadata": {
                "description": "If deploying an HTTPS application, the port on which your service listens for encrypted traffic. This field is not required when deploying http only."
            }, 
            "type": "string"
        }, 
        "sslCert": {
            "defaultValue": "NOT_SPECIFIED", 
            "metadata": {
                "description": "The SSL certificate .pfx file corresponding to public facing VIP."
            }, 
            "type": "string"
        }, 
        "sslPswd": {
            "defaultValue": "NOT_SPECIFIED", 
            "metadata": {
                "description": "The SSL certificate .pfx password corresponding to the certificate provided above."
            }, 
            "type": "securestring"
        }, 
        "applicationType": {
            "allowedValues": [
                "Windows", 
                "Linux"
            ], 
            "defaultValue": "Linux", 
            "metadata": {
                "description": "Is your application running on a Linux OS or a Windows OS?"
            }, 
            "type": "string"
        }, 
        "blockingLevel": {
            "allowedValues": [
                "low", 
                "medium", 
                "high", 
                "off", 
                "custom"
            ], 
            "defaultValue": "medium", 
            "metadata": {
                "description": "Please select how aggressive you would like the blocking level of this WAF to be.  Remember that the more aggressive the blocking level, the more potential there is for false-positives that the WAF might detect. Select Custom to specify your own security policy below."
            }, 
            "type": "string"
        }, 
        "customPolicy": {
            "defaultValue": "NOT_SPECIFIED", 
            "metadata": {
                "description": "Specify the publicly available URL of a custom ASM security policy in XML format. This policy will be applied in place of the standard High/Medium/Low policy as indicated above."
            }, 
            "type": "string"
        }, 
        "tenantId": {
            "metadata": {
                "description": "Your Azure service principal application tenant ID"
            }, 
            "type": "string"
        }, 
        "clientId": {
            "metadata": {
                "description": "Your Azure service principal application client ID"
            }, 
            "type": "string"
        }, 
        "servicePrincipalSecret": {
            "metadata": {
                "description": "Your Azure service principal application secret"
            }, 
            "type": "securestring"
        }, 
        "restrictedSrcAddress": {
            "defaultValue": "*", 
            "metadata": {
                "description": "Restricts management access to a specific network or address. Enter a IP address or address range in CIDR notation, or asterisk for all sources"
            }, 
            "type": "string"
        }, 
        "tagValues": {
            "defaultValue": {
                "application": "APP", 
                "cost": "COST", 
                "environment": "ENV", 
                "group": "GROUP", 
                "owner": "OWNER"
            }, 
            "type": "object"
        }
    }, 
    "variables": {
        "bigIpNicPortMap": {
            "1": {
                "Port": "[parameters('bigIpVersion')]"
            }, 
            "2": {
                "Port": "443"
            }, 
            "3": {
                "Port": "443"
            }, 
            "4": {
                "Port": "443"
            }, 
            "5": {
                "Port": "443"
            }, 
            "6": {
                "Port": "443"
            }
        }, 
        "bigIpVersionPortMap": {
            "12.1.21": {
                "Port": 443
            }, 
            "12.1.22": {
                "Port": 443
            }, 
            "13.0.000": {
                "Port": 8443
            }, 
            "443": {
                "Port": 443
            }, 
            "latest": {
                "Port": 8443
            }
        }, 
        "apiVersion": "2015-06-15", 
        "computeApiVersion": "2016-04-30-preview", 
        "networkApiVersion": "2016-06-01", 
        "storageApiVersion": "2015-06-15", 
        "insightsApiVersion": "2015-04-01", 
        "location": "[resourceGroup().location]", 
        "singleQuote": "'", 
        "f5CloudLibsTag": "v2.3.0", 
        "f5CloudLibsAzureTag": "v1.0.0", 
        "f5NetworksTag": "v2.0.0.0", 
        "f5NetworksSolutionScripts": "[concat('https://raw.githubusercontent.com/F5Networks/f5-azure-arm-templates/', variables('f5NetworksTag'), '/experimental/autoscale/waf/deploy_scripts/')]", 
        "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 489d460d2e5fcd401ce12f19b1d753a6bee30483cd0bf2b7548b7f8fe3caf5b727af96f013733cbd08b0c109e0cf535a29288d473b84cc834369204d5be5edc9\n            set hashes(f5-cloud-libs-aws.tar.gz) 0b602d069a6647e8268c7afc5201259058c4df545cdee5212bf1f6c2d24b11421201282c11e047b1df9b144a012312de45a07fcf28bd0d8cd3d3a86698774925\n            set hashes(f5-cloud-libs-azure.tar.gz) 16d2ce2086883ed5b47a3ba4e79541fd1a4bb64513222cf3a459297c2474d0bfc71a161ba2b8571707e1a6b273badaaf2c847993d0e60a4b52cd8c62cb03aba6\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 4db3176b45913a5e7ccf42ab9c7ac9d7de115cdbd030b9e735946f92456b6eb433087ed0e98ac4981c76d475cd38f4de49cd98c063e13d50328a270e5b3daa4a\n            set hashes(f5.policy_creator.tmpl) 54d265e0a573d3ae99864adf4e054b293644e48a54de1e19e8a6826aa32ab03bd04c7255fd9c980c3673e9cd326b0ced513665a91367add1866875e5ef3c4e3a\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature prKQi8FeX98kCcFaMwIdwgYADdAjZo6iNTnnckguwe5IVysTEVe4vR2HPLJlDzU25dU17sQvDNIX52K0VYN4LEkAuSMeMTmr2LnlRWcGEJ4YUo9lKMdKzMzJaznlScwaR4P5mEdJC0ygq8jinOIlkauLbqmAElNtxWpb+XLnR2R83vMl/y9/LGxCxrvqE3ZuXvyuKqpAlhS+AN5ZQBDFvlTgQi52KJWpw+3i7oalz5dsjbAs2gRARtZ57Pa8OD5Oz54Q1UDxuzPVNH+CY4vt93JKmduMBsT3F41RUFDmRzosjmBY/Ic9O7oLVlKwOusDeqqqlfOM5CxcVMXwB3oxxQ==\n    signing-key /Common/f5-irule\n}', variables('singleQuote'))]", 
        "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit\nfi\necho loaded verifyHash\nscript_loc=\"/var/lib/waagent/custom-script/download/0/\"\nconfig_loc=\"/config/cloud/\"\nhashed_file_list=\"${config_loc}f5-cloud-libs.tar.gz ${config_loc}f5-cloud-libs-azure.tar.gz ${script_loc}deploy_waf.sh ${script_loc}f5.http.v1.2.0rc7.tmpl ${script_loc}f5.policy_creator.tmpl ${script_loc}asm-policy.tar.gz\"\nfor file in $hashed_file_list; do\necho \"verifying $file\"\n/usr/bin/tmsh run cli script verifyHash $file\nif [ $? != 0 ]; then\necho \"$file is not valid\"\nexit 1\nfi\necho \"verified $file\"\ndone\necho \"expanding $hashed_file_list\"\ntar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/node_modules\ntar xvfz /config/cloud/f5-cloud-libs-azure.tar.gz -C /config/cloud/node_modules/f5-cloud-libs/node_modules\ntouch /config/cloud/cloudLibsReady', variables('singleQuote'))]", 
        "newStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'stor')]", 
        "storageAccountType": "Standard_LRS", 
        "dnsLabel": "[toLower(parameters('dnsLabel'))]", 
        "imageNameToLower": "[toLower(parameters('imageName'))]", 
        "skuToUse": "[concat('f5-bigip-virtual-edition-', parameters('licensedBandwidth'), '-', variables('imageNameToLower'),'-hourly')]", 
        "offerToUse": "f5-big-ip-hourly", 
        "bigIpNicPortValue": "[variables('bigIpNicPortMap')['1'].Port]", 
        "bigIpMgmtPort": 8443, 
        "availabilitySetName": "[concat(variables('dnsLabel'), '-avset')]", 
        "nicName": "[concat(variables('dnsLabel'), '-nic')]", 
        "defaultGw": "10.0.1.1", 
        "virtualNetworkName": "[concat(variables('dnsLabel'), '-vnet')]", 
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]", 
        "vnetAddressPrefix": "10.0.0.0/16", 
        "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-nsg'))]", 
        "publicIPAddressName": "[concat(variables('dnsLabel'), '-pip')]", 
        "publicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]", 
        "publicIPAddressType": "Static", 
        "subnetName": "[concat(variables('dnsLabel'),'-subnet')]", 
        "subnetId": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]", 
        "subnetPrefix": "10.0.1.0/24", 
        "ipAddress": "10.0.1.", 
        "loadBalancerName": "[concat(variables('dnsLabel'),'-alb')]", 
        "deviceNamePrefix": "[concat(variables('dnsLabel'),'-device')]", 
        "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]", 
        "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]", 
        "vmssName": "[concat(parameters('dnsLabel'),'-vmss')]", 
        "newDataStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'data000')]", 
        "subscriptionID": "[subscription().subscriptionId]", 
        "25m": 26214400, 
        "200m": 209715200, 
        "1g": 1073741824, 
        "scaleOutCalc": "[mul(variables(parameters('licensedBandwidth')), parameters('scaleOutThroughput'))]", 
        "scaleInCalc": "[mul(variables(parameters('licensedBandwidth')), parameters('scaleInThroughput'))]", 
        "scaleOutNetworkBits": "[div(variables('scaleOutCalc'), 100)]", 
        "scaleInNetworkBits": "[div(variables('scaleInCalc'), 100)]", 
        "scaleOutNetworkBytes": "[div(variables('scaleOutNetworkBits'), 8)]", 
        "scaleInNetworkBytes": "[div(variables('scaleInNetworkBits'), 8)]", 
        "timeWindow": "[concat('PT', parameters('scaleTimeWindow'), 'M')]", 
        "lbTcpProbeNameHttp": "tcp_probe_http", 
        "lbTcpProbeIdHttp": "[concat(variables('lbID'),'/probes/',variables('lbTcpProbeNameHttp'))]", 
        "lbTcpProbeNameHttps": "tcp_probe_https", 
        "lbTcpProbeIdHttps": "[concat(variables('lbID'),'/probes/',variables('lbTcpProbeNameHttps'))]", 
        "httpBackendPort": 880, 
        "httpsBackendPort": 8445, 
        "commandArgs": "[concat('-m ', parameters('applicationProtocols'), ' -d ', parameters('solutionDeploymentName'), ' -n ', parameters('applicationAddress'), ' -j 880 -k 8445 -h ', parameters('applicationPort'), ' -s ', parameters('applicationSecurePort'), ' -t ', toLower(parameters('applicationType')), ' -l ', toLower(parameters('blockingLevel')), ' -a ', parameters('customPolicy'), ' -c ', parameters('sslCert'), ' -r ', parameters('sslPswd'), ' -o ', parameters('applicationServiceFqdn'), ' -u ', parameters('adminUsername'))]"
    }, 
    "resources": [
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[variables('publicIPAddressName')]", 
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsLabel')]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "apiVersion": "[variables('apiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('dnsLabel'),'-nsg')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[variables('virtualNetworkName')]", 
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressPrefix')]"
                    ]
                }, 
                "subnets": [
                    {
                        "name": "[variables('subnetName')]", 
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]", 
                            "networkSecurityGroup": {
                                "id": "[variables('nsgID')]"
                            }
                        }
                    }
                ]
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Network/virtualNetworks"
        }, 
        {
            "apiVersion": "[variables('apiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-nsg')]", 
            "properties": {
                "securityRules": [
                    {
                        "name": "mgmt_allow_https", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "[variables('bigIpMgmtPort')]", 
                            "direction": "Inbound", 
                            "priority": 101, 
                            "protocol": "TCP", 
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]", 
                            "sourcePortRange": "*"
                        }
                    }, 
                    {
                        "name": "ssh_allow_22", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "22", 
                            "direction": "Inbound", 
                            "priority": 102, 
                            "protocol": "TCP", 
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]", 
                            "sourcePortRange": "*"
                        }
                    }, 
                    {
                        "name": "app_allow_http", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "[variables('httpBackendPort')]", 
                            "direction": "Inbound", 
                            "priority": 110, 
                            "protocol": "TCP", 
                            "sourceAddressPrefix": "*", 
                            "sourcePortRange": "*"
                        }
                    }, 
                    {
                        "name": "app_allow_https", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "[variables('httpsBackendPort')]", 
                            "direction": "Inbound", 
                            "priority": 111, 
                            "protocol": "TCP", 
                            "sourceAddressPrefix": "*", 
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Network/networkSecurityGroups"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
            ], 
            "location": "[variables('location')]", 
            "name": "[variables('loadBalancerName')]", 
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ], 
                "frontendIPConfigurations": [
                    {
                        "name": "loadBalancerFrontEnd", 
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('publicIPAddressID')]"
                            }
                        }
                    }
                ], 
                "inboundNatPools": [
                    {
                        "name": "sshnatpool", 
                        "properties": {
                            "backendPort": 22, 
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            }, 
                            "frontendPortRangeEnd": 50100, 
                            "frontendPortRangeStart": 50001, 
                            "protocol": "tcp"
                        }
                    }, 
                    {
                        "name": "mgmtnatpool", 
                        "properties": {
                            "backendPort": "[variables('bigIpMgmtPort')]", 
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            }, 
                            "frontendPortRangeEnd": 50200, 
                            "frontendPortRangeStart": 50101, 
                            "protocol": "tcp"
                        }
                    }
                ], 
                "loadBalancingRules": [
                    {
                        "Name": "app-http", 
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            }, 
                            "backendPort": "[variables('httpBackendPort')]", 
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            }, 
                            "frontendPort": "[parameters('applicationPort')]", 
                            "idleTimeoutInMinutes": 15, 
                            "probe": {
                                "id": "[variables('lbTcpProbeIdHttp')]"
                            }, 
                            "protocol": "Tcp"
                        }
                    }, 
                    {
                        "Name": "app-https", 
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            }, 
                            "backendPort": "[variables('httpsBackendPort')]", 
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            }, 
                            "frontendPort": "[parameters('applicationSecurePort')]", 
                            "idleTimeoutInMinutes": 15, 
                            "probe": {
                                "id": "[variables('lbTcpProbeIdHttps')]"
                            }, 
                            "protocol": "Tcp"
                        }
                    }
                ], 
                "probes": [
                    {
                        "name": "[variables('lbTcpProbeNameHttp')]", 
                        "properties": {
                            "intervalInSeconds": 15, 
                            "numberOfProbes": 3, 
                            "port": "[variables('httpBackendPort')]", 
                            "protocol": "Tcp"
                        }
                    }, 
                    {
                        "name": "[variables('lbTcpProbeNameHttps')]", 
                        "properties": {
                            "intervalInSeconds": 15, 
                            "numberOfProbes": 3, 
                            "port": "[variables('httpsBackendPort')]", 
                            "protocol": "Tcp"
                        }
                    }
                ]
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Network/loadBalancers"
        }, 
        {
            "apiVersion": "[variables('storageApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[variables('newStorageAccountName')]", 
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Storage/storageAccounts"
        }, 
        {
            "apiVersion": "[variables('storageApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[variables('newDataStorageAccountName')]", 
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Storage/storageAccounts"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]", 
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ], 
            "location": "[variables('location')]", 
            "name": "[variables('vmssName')]", 
            "plan": {
                "name": "[variables('skuToUse')]", 
                "product": "[variables('offerToUse')]", 
                "publisher": "f5-networks"
            }, 
            "properties": {
                "overprovision": "false", 
                "upgradePolicy": {
                    "mode": "Manual"
                }, 
                "virtualMachineProfile": {
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "main", 
                                "properties": {
                                    "protectedSettings": {
                                        "commandToExecute": "[concat('mkdir -p /config/cloud/node_modules; AZURE_CREDENTIALS_FILE=/config/cloud/azCredentials; BIG_IP_CREDENTIALS_FILE=/config/cloud/passwd; /usr/bin/install -m 400 /dev/null $AZURE_CREDENTIALS_FILE; /usr/bin/install -m 400 /dev/null $BIG_IP_CREDENTIALS_FILE; echo ', variables('singleQuote'), parameters('adminPassword'), variables('singleQuote'), ' > $BIG_IP_CREDENTIALS_FILE; echo ', variables('singleQuote'), '{\"clientId\": \"', parameters('clientId'), '\", \"tenantId\": \"', parameters('tenantId'), '\", \"secret\": \"', parameters('servicePrincipalSecret'), '\", \"subscriptionId\": \"', variables('subscriptionID'), '\", \"storageAccount\": \"', variables('newDataStorageAccountName'), '\", \"storageKey\": \"', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('newDataStorageAccountName')), variables('storageApiVersion')).key1, '\"}', variables('singleQuote'), ' > $AZURE_CREDENTIALS_FILE; cp f5-cloud-libs*.tar.gz* /config/cloud; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; echo -e ', variables('verifyHash'), ' >> /config/verifyHash; echo -e ', variables('installCloudLibs'), ' >> /config/installCloudLibs.sh; bash /config/installCloudLibs.sh; bash /config/cloud/node_modules/f5-cloud-libs/node_modules/f5-cloud-libs-azure/scripts/autoscalewaf.sh --resourceGroup ', resourceGroup().name, ' --vmssName ', variables('vmssName'), ' --userName ', parameters('adminUsername'), ' --password $BIG_IP_CREDENTIALS_FILE --azureSecretFile $AZURE_CREDENTIALS_FILE --managementPort ', variables('bigIpMgmtPort'), ' --wafScriptArgs ', variables('singleQuote'), variables('commandArgs'), variables('singleQuote'))]"
                                    }, 
                                    "publisher": "Microsoft.Azure.Extensions", 
                                    "settings": {
                                        "fileUris": [
                                            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]", 
                                            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-azure/', variables('f5CloudLibsAzureTag'), '/dist/f5-cloud-libs-azure.tar.gz')]", 
                                            "[concat(variables('f5NetworksSolutionScripts'), 'deploy_waf.sh')]", 
                                            "[concat(variables('f5NetworksSolutionScripts'), 'f5.http.v1.2.0rc7.tmpl')]", 
                                            "[concat(variables('f5NetworksSolutionScripts'), 'f5.policy_creator.tmpl')]", 
                                            "[concat(variables('f5NetworksSolutionScripts'), 'asm-policy.tar.gz')]"
                                        ]
                                    }, 
                                    "type": "CustomScript", 
                                    "typeHandlerVersion": "2.0"
                                }
                            }
                        ]
                    }, 
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "nic1", 
                                "properties": {
                                    "ipConfigurations": [
                                        {
                                            "name": "ip1", 
                                            "properties": {
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', variables('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
                                                    }
                                                ], 
                                                "loadBalancerInboundNatPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', variables('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/sshnatpool')]"
                                                    }, 
                                                    {
                                                        "id": "[concat('/subscriptions/', variables('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/mgmtnatpool')]"
                                                    }
                                                ], 
                                                "subnet": {
                                                    "id": "[concat('/subscriptions/', variables('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
                                                }
                                            }
                                        }
                                    ], 
                                    "primary": "true"
                                }
                            }
                        ]
                    }, 
                    "osProfile": {
                        "adminPassword": "[parameters('adminPassword')]", 
                        "adminUsername": "[parameters('adminUsername')]", 
                        "computerNamePrefix": "[variables('vmssName')]"
                    }, 
                    "storageProfile": {
                        "imageReference": {
                            "offer": "[variables('offerToUse')]", 
                            "publisher": "f5-networks", 
                            "sku": "[variables('skuToUse')]", 
                            "version": "[parameters('bigIpVersion')]"
                        }, 
                        "osDisk": {
                            "caching": "ReadOnly", 
                            "createOption": "FromImage", 
                            "name": "vmssosdisk", 
                            "vhdContainers": [
                                "[concat('https://', variables('newStorageAccountName'), '.blob.core.windows.net/vmss1')]"
                            ]
                        }
                    }
                }
            }, 
            "sku": {
                "capacity": "[parameters('vmScaleSetMinCount')]", 
                "name": "[parameters('instanceType')]", 
                "tier": "Standard"
            }, 
            "tags": {
                "application": "[parameters('tagValues').application]", 
                "costCenter": "[parameters('tagValues').cost]", 
                "environment": "[parameters('tagValues').environment]", 
                "group": "[parameters('tagValues').group]", 
                "owner": "[parameters('tagValues').owner]"
            }, 
            "type": "Microsoft.Compute/virtualMachineScaleSets"
        }, 
        {
            "apiVersion": "[variables('insightsApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]"
            ], 
            "location": "[variables('location')]", 
            "name": "autoscaleconfig", 
            "properties": {
                "enabled": true, 
                "name": "autoscaleconfig", 
                "profiles": [
                    {
                        "capacity": {
                            "default": "[parameters('vmScaleSetMinCount')]", 
                            "maximum": "[parameters('vmScaleSetMaxCount')]", 
                            "minimum": "[parameters('vmScaleSetMinCount')]"
                        }, 
                        "name": "Profile1", 
                        "notifications": [
                            {
                                "email": {
                                    "customEmails": "", 
                                    "sendToSubscriptionAdministrator": false, 
                                    "sendToSubscriptionCoAdministrators": false
                                }, 
                                "operation": "Scale"
                            }
                        ], 
                        "rules": [
                            {
                                "metricTrigger": {
                                    "metricName": "Network Out", 
                                    "metricNamespace": "", 
                                    "metricResourceUri": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]", 
                                    "operator": "GreaterThan", 
                                    "statistic": "Average", 
                                    "threshold": "[variables('scaleOutNetworkBytes')]", 
                                    "timeAggregation": "Average", 
                                    "timeGrain": "PT1M", 
                                    "timeWindow": "[variables('timeWindow')]"
                                }, 
                                "scaleAction": {
                                    "cooldown": "PT1M", 
                                    "direction": "Increase", 
                                    "type": "ChangeCount", 
                                    "value": "1"
                                }
                            }, 
                            {
                                "metricTrigger": {
                                    "metricName": "Network Out", 
                                    "metricNamespace": "", 
                                    "metricResourceUri": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]", 
                                    "operator": "LessThan", 
                                    "statistic": "Average", 
                                    "threshold": "[variables('scaleInNetworkBytes')]", 
                                    "timeAggregation": "Average", 
                                    "timeGrain": "PT1M", 
                                    "timeWindow": "[variables('timeWindow')]"
                                }, 
                                "scaleAction": {
                                    "cooldown": "PT1M", 
                                    "direction": "Decrease", 
                                    "type": "ChangeCount", 
                                    "value": "1"
                                }
                            }
                        ]
                    }
                ], 
                "targetResourceUri": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]"
            }, 
            "type": "Microsoft.Insights/autoscaleSettings"
        }
    ], 
    "outputs": {
        "GUI-URL": {
            "type": "string", 
            "value": "[concat('https://',reference(variables('publicIPAddressId')).dnsSettings.fqdn,':50101', ' - 50200')]"
        }, 
        "SSH-URL": {
            "type": "string", 
            "value": "[concat(reference(variables('publicIPAddressId')).dnsSettings.fqdn,' ',50001, ' - 50100')]"
        }
    }
}